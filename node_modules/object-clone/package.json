{
  "name": "object-clone",
  "version": "0.1.1",
  "description": "Adds Object.clone method to duplicate objects",
  "main": "index.js",
  "scripts": {
    "test": "echo \"Error: no test specified\" && exit 1"
  },
  "author": {
    "name": "Evan Pipta",
    "url": "747823"
  },
  "license": "ISC",
  "engines": {
    "node": "0.12.7",
    "npm": "2.11.3"
  },
  "readme": "# object-clone\nobject-clone is a npm package for cloning js objects\n\n### Introduction\nNormally when you assign an object to a new variable in javascript, both the original variable and the new variable point to the same object in memory. So for example:\n```\nvar x = { y: { z: 0 } };\nvar test = x;\ntest.y.z = 2;\n// Now x.y.z is also equal to 2 because they're both references to the same underlying object\n```\n\nThis package adds an Object.clone method which returns a totally new object, not a reference to the original.\n\n\n### Usage\nnpm install object-clone, or git clone the repository in your project's node_modules folder\nThen you can use it like this:\n```\nrequire('object-clone');\n\nvar x = { y: { z: 0 } };\nvar test = Object.clone( y );\ntest.y.z = 2;\n// Now test.y.z is 2, and x.y.z is still 0 because they're different objects\n```\n\n\n### Notes\nCurrently doesn't account for circular references and has undergone minimal testing. You probably shouldn't use this in a production site/app.\n\n",
  "readmeFilename": "README.md",
  "_id": "object-clone@0.1.0",
  "_shasum": "c32add10a4fb1d00addf4790a9ac51255da73be7",
  "_from": "object-clone@*"
}
