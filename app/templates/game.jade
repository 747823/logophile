
include ./parts/header.jade
title Logophile | Game
meta( name="description", content="Logophile is a fast-paced word finding game similar to boggle." )
include ./parts/assets.jade

!= "</head>"

body
	include ./parts/popup.jade
	include ./parts/game-info.jade
	include ./parts/sidebar.jade
	
	div( class="game" )
		//- include ./parts/logo-small.jade
		include ./parts/share.jade
		include ./parts/playercard.jade

		div( class="inner" id="game-inner" )
			div( class="col left" v-bind:style="{ maxWidth: leftColWidth }" )
				div( class="remaining" )
					div( class="list nowrap" v-if="gameData.game.roundStarted" )
							h2 Remaining: 
								//- I think the following takes up too much space, but I'll leave it commented in case we decide to add it again:
								//- span( class="remaining-num" ) 95
								//- span( class="remaining-percentage" ) (90%)
							div
								ul( class="lengths" )
									li length
									li( v-for="len in userRemainingCountKeys" ) [[ len ]]

								ul( class="counts" )
									li count
									li( v-for="len in userRemainingCountKeys" ) [[ userRemainingCount[ len ] ]]

			div( class="col center" v-bind:style="{ minWidth: boardpx+'px', maxWidth: boardpx+'px' }" )
				div( class="game-center" )
					div( class="hud" id="hud" v-bind:class="{ 'alignLeft': !gameData.game.roundStarted && gameData.game.rounds > 0 }" )

						div( class="time-wrapper" v-if="gameData.game.initd && gameData.game.roundStarted" )
							h2( class="timer" )
								| <div>Round [[gameData.game.rounds]] started:</div> [[ gameData.game.timeLimit - gameData.game.roundTime | time 'ceil' ]]

						div( v-if="gameData.game.initd && !gameData.game.roundStarted && gameData.game.rounds > 0" )
							p Round [[gameData.game.rounds]] ended

						div( class="place-wrapper" v-if="gameData.game.initd && gameData.game.rounds > 0" )
							h3( class="score" ) Score: [[userData.score]]
								span(class="place") [[place]]
							//- h4( class="place" ) Place [[place]] / [[gameData.users.playing.length]]

						div( v-if="gameData.game.initd && !gameData.game.roundStarted" )
							p( class="round-starts" ) Next round starts in: [[ gameData.game.pauseTimeLimit - gameData.game.pauseTime | time 'ceil' ]]
							//- h2( class="round-starts-timer" ) [[ gameData.game.pauseTimeLimit - gameData.game.pauseTime | time 'ceil' ]]

						h2( class="waiting-to-start" v-if="!gameData.game.initd" ) Waiting to start first round
						a( href="#" class="button" v-if="!gameData.game.initd" v-on:click="startGame()") Start Game

					div( class="board" v-bind:class="{ 'active': gameData.game.roundStarted || gameData.game.rounds < 0 }" v-bind:style="{ height: boardpx+'px', width: boardpx+'px', minHeight: boardpx+'px', maxHeight: boardpx+'px' }" )
						div( class="row" v-bind:style="{ height: 100/gameData.game.board.length+'%' }" v-for="x in gameData.game.board" )
							div( v-bind:class="{ 'cell': true, 'alt': false, 'on': this.boardHighlighted[$parent.$index][$index].highlight == 'on', 'partial': this.boardHighlighted[$parent.$index][$index].highlight == 'partial' }"  
								v-bind:style="{ width: 100/gameData.game.board.length+'%' }" 
								v-for="y in gameData.game.board[$index]" track-by="$index" )
								div( class="letter" v-bind:style="{ fontSize: boardpx*0.5/gameData.game.board.length + 'px' }" ).
									[[ gameData.game.board[$parent.$index][$index].letter ]]

					div( class="word" )
						input( type="text" value="type here" 
							v-model="wordToCheck"
							v-on:keydown.enter="submit($event)" 
							v-on:keydown.space.prevent="submit($event)" 
							v-on:keydown="wordInputDown($event)" 
							v-on:keyup="wordInputUp($event)"
							v-on:focus="wordInputFocus($event)"
							v-on:blur="wordInputBlur($event)" )
						h3 [[inputlength]] Letters 
							span( class="word-score" ) +[[inputscore]]
								span( class="word-points" ) points

			div( class="col right" v-if="gameData.game.initd && gameData.game.rounds > 0" )

				div( class="found" v-if="gameData.game.roundStarted" )
					h2 Found Words
						span( class="found-num" ) [[ foundNum ]] 
							span( class="found-percentage" ) ([[foundPercentage]]%)

					//- Repeat all found section for each word length in userWordsSorted
					div( class="found-section" v-for="len in userWordsSortedKeys" )
						h4( class="" ) [[len]] Letters 
							//- Since Object.keys().length doesn't work in the brackets, we need to find another way to do this
							//- span( class="found-num" ) [[userWordsSorted[ len ].length]]
								span( class="found-percentage" ) (X points)
						ul( class="inline" )
							li( v-for="word in userWordsSorted[ len ]" ) [[$key.toLowerCase()]]

				div( class="found solution" v-if="!gameData.game.roundStarted" )
					h2 Solution
						span( class="solution-found-count" ) ( Found [[ foundNum ]] of [[ solutionLength ]] )
				
					//- Repeat all found section for each word length in solution
					div( class="found-section" v-for="len in solutionSortedKeys" )
						h4( class="" ) [[len]] Letters
							//- Since Object.keys().length doesn't work in the brackets, we need to find another way to do this
							//- span( class="found-num" ) Found [[Object.keys( len ).length]]
								//- span( class="found-percentage" ) (X points)
						ul( class="inline" )
							li( v-for="word in solutionSorted[ len ]" v-on:mouseover="this.wordToHighlight = $key" v-on:mouseout="this.wordToHighlight = '' " v-bind:class="{ 'found-word': !!userData.words[ $key ], 'found-unique': false }" ) [[$key.toLowerCase()]]

!= "</html>"